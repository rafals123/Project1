#Declaration of the extended frontend version for Buildkit
# syntax=docker/dockerfile:1.4
#Stage 1 of image build
#Using a base image with the "from scratch" method
FROM scratch AS builder 
#Using a base image with minimal system Linux Alpine
ADD alpine-minirootfs-3.19.1-x86_64.tar /
#Updating packages, installing necessary packages, also cleaning the cache memory
RUN apk update && apk add nodejs npm && apk add git \
    && apk add openssh-client && rm -rf /var/cache/apk/*
#Creating SSH directory with proper permissions, adding GitHub host key to known hosts, also starting ssh-agent
RUN mkdir -p -m 0700 ~/.ssh && ssh-keyscan github.com >> ~/.ssh/known_hosts \
    && eval $(ssh-agent)
#Specifying the working directory
WORKDIR /usr/app
#Cloning the repo using SSH authentication
RUN --mount=type=ssh git clone git@github.com:rafals123/Project1.git
#Specifying the working directory
WORKDIR /usr/app/Project1/src
#Running the installation of dependencies defined in the package.json file
RUN npm install

#Stage 2 of image build
#Repeating the declaration of the extended frontend version for Buildkit
# syntax=docker/dockerfile:1.4
#Using an Alpine image
FROM alpine:3.8
#Defining VERSION arg and setting environment variable
ARG VERSION
ENV APP_VERSION=${VERSION:-v1}
#Copying the files from previous build stage
COPY --from=builder /usr/app/Project1 /usr/app/
#Updating APK packages, installing node.js, also cleaning the cache memory
RUN apk update && apk add --no-cache nodejs && rm -rf /var/cache/apk/*
#Information about the port for container listening
EXPOSE 8080
#Specifying the working directory
WORKDIR /usr/app/src
#Running server.js application
CMD node server.js  
#Using HEALTHCHECK command to verify container functionality
HEALTHCHECK --interval=10s --timeout=1s --start-period=5s --retries=3 \
    CMD wget -qO- http://localhost:3000 || exit 1
